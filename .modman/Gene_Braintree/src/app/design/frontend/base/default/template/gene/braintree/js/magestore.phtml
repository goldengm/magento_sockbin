<?php
/**
 * Add in support for Magestore One Step Checkout
 * http://ecommerce.aheadworks.com/magento-extensions/one-step-checkout.html
 */
?>
<!-- MAGESTORE BRAINTREE SUPPORT -->
<script type="text/javascript">

    // Wrap this in some error handling, just in case some checkouts attempt to include us twice
    if(mageStoreOriginalPlaceOrder === undefined) {

        /**
         * Wrap this functionality up in easy to call function
         */
        showCheckoutLoading = function () {
            $('onestepcheckout-place-order-loading').show();
            $('onestepcheckout-button-place-order').removeClassName('onestepcheckout-btn-checkout');
            $('onestepcheckout-button-place-order').addClassName('place-order-loader');
        };
        hideCheckoutLoading = function () {
            $('onestepcheckout-place-order-loading').hide();
            $('onestepcheckout-button-place-order').addClassName('onestepcheckout-btn-checkout');
            $('onestepcheckout-button-place-order').removeClassName('place-order-loader');
        };
        getCheckoutPaymentMethod = function () {
            return $RF($('one-step-checkout-form'), 'payment[method]');
        };

        // Store the old complete checkout function
        var mageStoreOriginalPlaceOrder = oscPlaceOrder;

        // Re-define the original method so we can do some jazz with it
        oscPlaceOrder = function (element) {

            // Store the arguments
            var originalArguments = arguments;

            if ($('device_data')) {
                // Device data should never be disabled
                $('device_data').removeAttribute('disabled');
            }

            // Always attempt to update the card type on submission
            if ($$('[data-genebraintree-name="number"]').first() != undefined) {
                vzero.updateCardType($$('[data-genebraintree-name="number"]').first().value);
            }

            // Run the original validation functions
            var validator = new Validation('one-step-checkout-form');
            if (validator.validate()) {

                // Are we dealing with the credit card method?
                if (getCheckoutPaymentMethod() == 'gene_braintree_creditcard') {

                    // Do we want to pass any extra paramters into the updateData request
                    var parameters = {};

                    // If the billing address is selected and we're wanting to ship to that address we need to pass the addressId
                    if ($('billing-address-select') != undefined && $('billing-address-select').value != '') {
                        parameters.addressId = $('billing-address-select').value;
                    }

                    // Update the data as we're in a one step
                    vzero.updateData(
                        function () {

                            // Verify we're not using a saved address
                            if ($('billing-address-select') != undefined && $('billing-address-select').value == '' || $('billing-address-select') == undefined) {

                                // Grab these directly from the form and update
                                if ($('billing:firstname') != undefined && $('billing:lastname') != undefined) {
                                    vzero.setBillingName($('billing:firstname').value + ' ' + $('billing:lastname').value);
                                }
                                if ($('billing:postcode') != undefined) {
                                    vzero.setBillingPostcode($('billing:postcode').value);
                                }
                            }

                            // Check is running
                            already_placing_order = true;

                            // Show the loading
                            showCheckoutLoading();

                            // Process the card
                            vzero.process({
                                onSuccess: function () {

                                    // Disable the standard credit card form so the values don't get passed through to the checkout
                                    $$('#credit-card-form input, #credit-card-form select').each(function (formElement) {
                                        if (formElement.id != 'creditcard-payment-nonce' && formElement.getAttribute('data-genebraintree-name') != 'cvv' && formElement.id != 'gene_braintree_creditcard_store_in_vault') {
                                            formElement.setAttribute('disabled', 'disabled');
                                        }
                                    });

                                    if ($('device_data')) {
                                        // Always make sure device data is sent with the request
                                        $('device_data').removeAttribute('disabled');
                                    }

                                    // No longer running
                                    already_placing_order = false;

                                    // Fire the original event and return the response
                                    completeCheckoutResponse = mageStoreOriginalPlaceOrder.apply(this, originalArguments);

                                    // Re-enable any form elements which were disabled
                                    $$('#credit-card-form input, #credit-card-form select').each(function (formElement) {
                                        formElement.removeAttribute('disabled');
                                    });

                                    // Run the original function
                                    return completeCheckoutResponse;
                                },
                                onFailure: function () {

                                    // Reset the waiting for the parent function
                                    hideCheckoutLoading();

                                    // No longer running
                                    already_placing_order = false;

                                }
                            });

                        },
                        parameters
                    );

                    // We're updating data don't do anything else for now
                    return false;

                }

            }

            // Stop further processing
            return mageStoreOriginalPlaceOrder.apply(this, arguments);
        };


        // It's not been ran so set it to false
        var PayPalCompleteRan = false;

        /**
         * Function to run once PayPal has been completed
         */
        completePayPal = function (obj) {

            // Check the flag to make sure we're good to run the function
            if (!PayPalCompleteRan) {

                // Mark the flag as true
                PayPalCompleteRan = true;

                // Force check
                $('p_method_gene_braintree_paypal').checked = true;

                // Re-enable the form
                $('paypal-payment-nonce').removeAttribute('disabled');
                $('paypal-payment-nonce').value = obj.nonce;

                // Show the button again
                hidePayPalButton();

                showCheckoutLoading();

                if ($('device_data')) {
                    // Always make sure device data is sent with the request
                    $('device_data').removeAttribute('disabled');
                }

                // Run the complete checkout method
                return oscPlaceOrder($('onestepcheckout-button-place-order'));

            }

        };

        // Flag to check if the PayPal button is already loading
        var PayPalButtonLoading = false;

        /**
         * Easily add the PayPal button into the DOM
         */
        addPayPalButton = function () {

            // Check we can locate the submit button
            if ($('onestepcheckout-button-place-order') != undefined && $('paypal-complete') == undefined && PayPalButtonLoading == false) {

                // The button is loading
                PayPalButtonLoading = true;

                // As the PayPal button has to request data from the server show the loader
                showCheckoutLoading();

                // Update the data contained within the classes
                vzero.updateData(function () {

                    // The button is no longer loading
                    PayPalButtonLoading = false;

                    // Hide it once we're done
                    hideCheckoutLoading();

                    // Validate the payment method is still correct
                    if (getCheckoutPaymentMethod() == 'gene_braintree_paypal' && $('paypal-complete') == undefined) {

                        // Set the flag to false as we've created a new button
                        PayPalCompleteRan = false;

                        // Hide the submit button
                        $('onestepcheckout-button-place-order').hide();

                        // Add in our PayPal button
                        $('onestepcheckout-button-place-order').insert({after: '<div id="paypal-complete"><label id="paypal-label"><?php echo $this->__('Complete checkout with'); ?> </label><div id="paypal-container"></div></div>'});

                        // Always stop the window from opening
                        $('paypal-complete').observe('click', function (event) {

                            // Validate the form before we open the PayPal modal window
                            var validator = new Validation('one-step-checkout-form');
                            if (!validator.validate()) {

                                // Sadly we're unable to intercept the PayPal window in any other way then just hard closing it
                                vzeroPaypal.closePayPalWindow();
                            }
                        });

                        // Add in the PayPal button
                        vzeroPaypal.addPayPalButton({
                            onSuccess: completePayPal
                        });

                    }

                });

            } else if ($('paypal-complete') != undefined) {

                // The button is loading
                PayPalButtonLoading = true;

                // As the PayPal button has to request data from the server show the loader
                showCheckoutLoading();

                // Update the data contained within the classes
                vzero.updateData(function () {

                    // The button is no longer loading
                    PayPalButtonLoading = false;

                    // Hide it once we're done
                    hideCheckoutLoading();

                    // Validate the payment method is still correct
                    if (getCheckoutPaymentMethod() == 'gene_braintree_paypal') {

                        // Set the flag to false as we've created a new button
                        PayPalCompleteRan = false;

                        // Hide the submit button
                        $('onestepcheckout-button-place-order').hide();

                        // Add in the PayPal button
                        $('paypal-complete').show();

                    }

                });

            }

        };

        /**
         * As we need to remove the PayPal button in multiple places
         */
        hidePayPalButton = function () {

            // If the user has selected a different payment method make some modifications
            if ($('onestepcheckout-button-place-order') != undefined) {
                $('onestepcheckout-button-place-order').show();
            }

            // Remove the PayPal element
            if ($('paypal-complete') != undefined) {
                $('paypal-complete').hide();
            }

        };

        // Check if the payment method is the default
        if (getCheckoutPaymentMethod()) {
            if ((getCheckoutPaymentMethod() == 'gene_braintree_paypal' && $('paypal-saved-accounts') == undefined) || ($$('#paypal-saved-accounts input:checked[type=radio]').first() != undefined && $$('#paypal-saved-accounts input:checked[type=radio]').first().value == 'other')) {

                // Verify that vzero is defined before attempting to use it
                if (typeof vzeroPaypal !== 'undefined') {

                    // Always set the amount as it's needed within 3D secure requests
                    vzeroPaypal.setPricing('<?php echo Mage::getSingleton('checkout/cart')->getQuote()->collectTotals()->getGrandTotal(); ?>', '<?php echo Mage::getSingleton('checkout/cart')->getQuote()->getBaseCurrencyCode(); ?>');
                }

                addPayPalButton();
            }
        }

        // Intercept people swapping methods
        var originalSaveShippingMethod = save_shipping_method;
        save_shipping_method = function (shipping_method_url, update_shipping_payment, update_shipping_review) {

            // Make sure the paypal complete action hasn't just ran
            if (PayPalCompleteRan != true) {

                // Detect PayPal choice
                if (getCheckoutPaymentMethod() == 'gene_braintree_paypal') {

                    if ($('paypal-saved-accounts') == undefined) {
                        addPayPalButton();
                    } else if ($('paypal-saved-accounts') != undefined && $$('#paypal-saved-accounts input:checked[type=radio]').first() != undefined && $$('#paypal-saved-accounts input:checked[type=radio]').first().value == 'other') {
                        addPayPalButton();
                    } else {
                        hidePayPalButton();
                    }

                } else {
                    hidePayPalButton();
                }
            }

            return originalSaveShippingMethod.apply(this, arguments);
        };

        // What should happen if the user closes the 3D secure window?
        vzero.close3dSecureMethod(function () {

            // Re-tokenize all the saved cards
            vzero.tokenize3dSavedCards(function () {

                // Reset the waiting for the parent function
                hideCheckoutLoading();

                // No longer running
                already_placing_order = false;

            });

        });

        // Observe the card type here as it'll fail within creditCard.phtml
        vzero.observeCardType();

        // Observe all Ajax requests for changes
        vzero.observeAjaxRequests(function () {

            // If the method is PayPal remove and re-add the PayPal button
            if (getCheckoutPaymentMethod() == 'gene_braintree_paypal') {
                hidePayPalButton();
                addPayPalButton();
            } else {
                vzero.updateData();
            }

        });

    }

</script>
<style type="text/css">
    #braintree-paypal-loggedin {
        display: none!important;
    }
    #braintree-paypal-loggedout {
        display: block!important;
    }
</style>