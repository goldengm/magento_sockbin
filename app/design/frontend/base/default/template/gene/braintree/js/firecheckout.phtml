<?php
/**
 * Add in support for Fire Checkout
 * http://templates-master.com/magento-one-page-checkout.html
 */
?>
<!-- FIRECHECKOUT BRAINTREE SUPPORT -->
<script type="text/javascript">

    // Check that we haven't already set the original complete checkout method
    if(fireCheckoutSaveCheckout === undefined) {

        // Store the old complete checkout function
        var fireCheckoutSaveCheckout = FireCheckout.prototype.save;

        // Re-define the original method so we can do some jazz with it
        FireCheckout.prototype.save = function () {

            if($('device_data')) {
                // Device data should never be disabled
                $('device_data').removeAttribute('disabled');
            }

            // Always attempt to update the card type on submission
            if($$('[data-genebraintree-name="number"]').first() != undefined) {
                vzero.updateCardType($$('[data-genebraintree-name="number"]').first().value);
            }

            // Run the original validation functions
            if (this.validate() && this.loadWaiting == false) {

                // Are we dealing with the credit card method?
                if (payment.currentMethod == 'gene_braintree_creditcard') {

                    // Do we want to pass any extra paramters into the updateData request
                    var parameters = {};

                    // If the billing address is selected and we're wanting to ship to that address we need to pass the addressId
                    if($('billing-address-select') != undefined && $('billing-address-select').value != '')
                    {
                        parameters.addressId = $('billing-address-select').value;
                    }

                    // Update the data as we're in a one step
                    vzero.updateData(
                        function() {

                            // Verify we're not using a saved address
                            if($('billing-address-select') != undefined && $('billing-address-select').value == '' || $('billing-address-select') == undefined) {

                                // Grab these directly from the form and update
                                if ($('billing:firstname') != undefined && $('billing:lastname') != undefined) {
                                    vzero.setBillingName($('billing:firstname').value + ' ' + $('billing:lastname').value);
                                }
                                if ($('billing:postcode') != undefined) {
                                    vzero.setBillingPostcode($('billing:postcode').value);
                                }
                            }

                            // Show the loading
                            this.setLoadWaiting(true);

                            // Process the card
                            vzero.process({
                                onSuccess: function () {

                                    // Disable the standard credit card form so the values don't get passed through to the checkout
                                    $$('#credit-card-form input, #credit-card-form select').each(function (formElement) {
                                        if (formElement.id != 'creditcard-payment-nonce' && formElement.getAttribute('data-genebraintree-name') != 'cvv' && formElement.id != 'gene_braintree_creditcard_store_in_vault') {
                                            formElement.setAttribute('disabled', 'disabled');
                                        }
                                    });

                                    if($('device_data')) {
                                        // Always make sure device data is sent with the request
                                        $('device_data').removeAttribute('disabled');
                                    }

                                    // We're no longer loading
                                    this.setLoadWaiting(false);

                                    // Fire the original event and return the response
                                    completeCheckoutResponse = fireCheckoutSaveCheckout.apply(this, arguments);

                                    // Re-enable any form elements which were disabled
                                    $$('#credit-card-form input, #credit-card-form select').each(function (formElement) {
                                        formElement.removeAttribute('disabled');
                                    });

                                    // Run the original function
                                    return completeCheckoutResponse;
                                }.bind(this),
                                onFailure: function() {

                                    // Reset the waiting for the parent function
                                    this.setLoadWaiting(false);

                                }.bind(this)
                            });

                        }.bind(this),
                        parameters
                    );

                    // We're updating data don't do anything else for now
                    return false;

                }

            }

            // Stop further processing
            return fireCheckoutSaveCheckout.apply(this, arguments);
        };


        // It's not been ran so set it to false
        var PayPalCompleteRan = false;

        /**
         * Function to run once PayPal has been completed
         */
        completePayPal = function (obj) {

            // Check the flag to make sure we're good to run the function
            if (!PayPalCompleteRan) {

                // Mark the flag as true
                PayPalCompleteRan = true;

                // Force check
                payment.switchMethod('gene_braintree_paypal', true);

                // Re-enable the form
                $('paypal-payment-nonce').removeAttribute('disabled');
                $('paypal-payment-nonce').value = obj.nonce;

                if($('creditcard-payment-nonce') != null) {
                    // We have to disable the credit card one
                    $('creditcard-payment-nonce').setAttribute('disabled', 'disabled');
                }

                // Hide the button
                hidePayPalButton();

                // Always make sure device data is sent with the request
                if ($('device_data') != undefined) {
                    $('device_data').removeAttribute('disabled');
                }

                // Submit the checkout
                checkout.save();
                return false;

            }

        };

        // Flag to check if the PayPal button is already loading
        var PayPalButtonLoading = false;

        /**
         * Easily add the PayPal button into the DOM
         */
        addPayPalButton = function () {

            // Check we can locate the submit button
            if ($$('#review-buttons-container .btn-checkout').first() != undefined && $('paypal-complete') == undefined && PayPalButtonLoading == false) {

                // The button is loading
                PayPalButtonLoading = true;

                // Start the loading process
                checkout.setLoadWaiting(true);

                // Update the data contained within the classes
                vzero.updateData(function () {

                    // Cancel said loading process
                    checkout.setLoadWaiting(false);

                    // The button is no longer loading
                    PayPalButtonLoading = false;

                    // Validate the payment method is still correct
                    if (payment.currentMethod == 'gene_braintree_paypal' && $('paypal-complete') == undefined) {

                        // Set the flag to false as we've created a new button
                        PayPalCompleteRan = false;

                        // Hide the submit button
                        $$('#review-buttons-container .btn-checkout').first().hide();

                        // Add in our PayPal button
                        $$('#review-buttons-container .btn-checkout').first().up().insert('<div id="paypal-complete"><label id="paypal-label"><?php echo $this->__('Complete checkout with'); ?> </label><div id="paypal-container"></div></div>');

                        // Always stop the window from opening
                        $('paypal-complete').observe('click', function (event) {

                            // Validate the form like the parent method
                            if (!checkout.validate()) {

                                // Sadly we're unable to intercept the PayPal window in any other way then just hard closing it
                                vzeroPaypal.closePayPalWindow();
                            }
                        });

                        // Add in the PayPal button
                        vzeroPaypal.addPayPalButton({
                            onSuccess: completePayPal
                        });
                    }

                });

            } else if ($('paypal-complete') != undefined && PayPalButtonLoading == false) {

                // The button is loading
                PayPalButtonLoading = true;

                // Start the loading process
                checkout.setLoadWaiting(true);

                // Update the data contained within the classes
                vzero.updateData(function () {

                    // The button is no longer loading
                    PayPalButtonLoading = false;

                    // Cancel said loading process
                    checkout.setLoadWaiting(false);

                    // Validate the payment method is still correct
                    if (payment.currentMethod == 'gene_braintree_paypal') {

                        // Set the flag to false as we've created a new button
                        PayPalCompleteRan = false;

                        // Hide the submit button
                        $$('#review-buttons-container .btn-checkout').first().hide();

                        // Add in our PayPal button
                        $('paypal-complete').show();
                    }

                });

            }

        };

        /**
         * As we need to remove the PayPal button in multiple places
         */
        hidePayPalButton = function () {

            // Just in case things are still loading
            checkout.setLoadWaiting(false);

            // If the user has selected a different payment method make some modifications
            if ($$('#review-buttons-container .btn-checkout').first() != undefined) {
                $$('#review-buttons-container .btn-checkout').first().show();
            }

            // Remove the PayPal element
            if ($('paypal-complete') != undefined) {
                $('paypal-complete').hide();
            }

        };

        // Check if the payment method is the default
        if (payment != undefined) {
            if ((payment.currentMethod == 'gene_braintree_paypal' && $('paypal-saved-accounts') == undefined) || ($$('#paypal-saved-accounts input:checked[type=radio]').first() != undefined && $$('#paypal-saved-accounts input:checked[type=radio]').first().value == 'other')) {

                // Verify that vzero is defined before attempting to use it
                if (typeof vzeroPaypal !== 'undefined') {

                    // Set the amount for the PayPal modal window
                    vzeroPaypal.setPricing('<?php echo Mage::getSingleton('checkout/cart')->getQuote()->collectTotals()->getGrandTotal(); ?>', '<?php echo Mage::getSingleton('checkout/cart')->getQuote()->getBaseCurrencyCode(); ?>');
                }

                addPayPalButton();
            }
        }

        // Store the original payment method
        var paymentOriginal = Payment.prototype.switchMethod;

        // Intercept the save function
        Payment.prototype.switchMethod = function (method, skipOverride) {

            // Detect PayPal choice
            if (method == 'gene_braintree_paypal' && typeof skipOverride === 'undefined') {

                if ($('paypal-saved-accounts') == undefined) {
                    addPayPalButton();
                } else if ($('paypal-saved-accounts') != undefined && $$('#paypal-saved-accounts input:checked[type=radio]').first() != undefined && $$('#paypal-saved-accounts input:checked[type=radio]').first().value == 'other') {
                    addPayPalButton();
                } else {
                    hidePayPalButton();
                }

            } else if(typeof skipOverride === 'undefined') {
                hidePayPalButton();
            }


            // Run the original function
            return paymentOriginal.apply(this, arguments);

        };

        // If we have any saved accounts we'll need to do something jammy
        if ($$('#paypal-saved-accounts input[type=radio]').first() != undefined) {

            // Loop through each radio button
            $$('#paypal-saved-accounts input[type=radio]').each(function (savedAccount) {

                // Observe them changing
                Event.observe(savedAccount, 'click', function (ele) {
                    if (savedAccount.value == 'other') {
                        addPayPalButton();
                    } else {
                        hidePayPalButton();
                    }
                });
            });
        }

        // What should happen if the user closes the 3D secure window?
        vzero.close3dSecureMethod(function () {

            // Re-tokenize all the saved cards
            vzero.tokenize3dSavedCards(function () {
                checkout.setLoadWaiting(false);
            });

        });

        // Observe all Ajax requests for changes
        vzero.observeAjaxRequests(function () {

            // If the method is PayPal remove and re-add the PayPal button
            if (payment.currentMethod == 'gene_braintree_paypal') {
                hidePayPalButton();
                addPayPalButton();
            } else {
                vzero.updateData();
            }

        });
    }
</script>
<style type="text/css">
    #braintree-paypal-loggedin {
        display: none!important;
    }
    #braintree-paypal-loggedout {
        display: block!important;
    }
</style>